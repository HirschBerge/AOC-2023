#![allow(unused_imports)]
#![allow(dead_code)]
use nom::{
    bytes::complete::take_until,
    character::complete::{self, line_ending, space1},
    multi::{many1, separated_list1},
    sequence::tuple,
    IResult, Parser,
};
use nom_supreme::{tag::complete::tag, ParserExt};
use std::ops::Range;

#[derive(Debug)]
struct SeedMap {
    mappings: Vec<(Range<u64>, Range<u64>)>,
}
impl SeedMap {
    fn translate() -> u64 {
        todo!("Implement translation from a src to a dest.")
    }
}
fn line(input: &str) -> IResult<&str, (Range<u64>, Range<u64>)> {
    let (input, (dest, src, num)) = tuple((
        complete::u64.preceded_by(tag(" ")),
        complete::u64.preceded_by(tag(" ")),
        complete::u64,
    ))(input)?;
    Ok((input, (src..(src + num), dest..(dest + num))))
}
fn main() -> Result<(), Box<dyn std::error::Error>> {
    let data = aochelpers::get_daily_input(5, 2023)?;
    let _ = harvest(data.as_str());
    Ok(())
}
fn seed_map(input: &str) -> IResult<&str, SeedMap> {
    // Pull out the tables, in order.
    take_until("map:")
        .precedes(tag("map:"))
        .precedes(many1(line_ending.precedes(line)).map(|mappings| SeedMap { mappings }))
        .parse(input)
}
fn parse_seeds(input: &str) -> IResult<&str, (Vec<u64>, Vec<SeedMap>)> {
    // Pull out the seed table.
    let (input, seeds) = tag("seeds: ")
        .precedes(separated_list1(space1, complete::u64))
        .parse(input)?;
    let (input, maps) = many1(seed_map)(input)?;
    // dbg!(maps, seeds);
    // todo!()
    Ok((input, (seeds, maps)))
}

fn harvest(input: &str) -> Result<String, Box<dyn std::error::Error>> {
    let (_, (seeds, maps)) = parse_seeds(input).expect("A good parse.");
    dbg!(seeds, maps);
    Ok("".to_string())
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn part_1() -> Result<(), Box<dyn std::error::Error>> {
        let data = "seeds: 79 14 55 13

seed-to-soil map:
50 98 2
52 50 48

soil-to-fertilizer map:
0 15 37
37 52 2
39 0 15

fertilizer-to-water map:
49 53 8
0 11 42
42 0 7
57 7 4

water-to-light map:
88 18 7
18 25 70

light-to-temperature map:
45 77 23
81 45 19
68 64 13

temperature-to-humidity map:
0 69 1
1 0 69

humidity-to-location map:
60 56 37
56 93 4";
        assert_eq!("35", harvest(data).unwrap());
        Ok(())
    }
}
