use aochelpers::get_daily_input;
use std::error::Error;

fn is_custom_symbol(c: char) -> bool {
    c.is_ascii_punctuation() && c != '.'
}
fn main() -> Result<(), Box<dyn Error>> {
    let data = get_daily_input(3, 2023)?;
    let line_count = data.lines().count();
    for (lineidx, line) in data.split('\n').enumerate() {
        let minus_one = match lineidx {
            0 => "nothing",
            _ => match data.lines().nth(lineidx - 1) {
                Some(ln) => ln,
                None => "nothing",
            },
        };
        let plus_one = if lineidx == line_count {
            "nothing"
        } else {
            match data.lines().nth(lineidx + 1) {
                Some(ln) => ln,
                None => "nothing",
            }
        };
        for (idx, char) in line.chars().enumerate() {
            if minus_one == "nothing"
                && is_custom_symbol(plus_one.chars().nth(idx).unwrap())
                && char.is_numeric()
            {
                let nxt = plus_one.chars().nth(idx).unwrap();
                println!("First => {char} => {nxt}")
            } else if plus_one == "nothing"
                && is_custom_symbol(minus_one.chars().nth(idx).unwrap())
                && char.is_numeric()
            {
                let prv = minus_one.chars().nth(idx).unwrap();
                println!("{prv} => {char} => Final")
            } else if minus_one != "nothing" && plus_one != "nothing" {
                if char.is_numeric() {
                    if is_custom_symbol(plus_one.chars().nth(idx).unwrap())
                        || is_custom_symbol(minus_one.chars().nth(idx).unwrap())
                    {
                        let nxt = plus_one.chars().nth(idx).unwrap();
                        let prv = minus_one.chars().nth(idx).unwrap();
                        println!("{prv} => {char} => {nxt}")
                    }
                }
            }
            // let prv = minus_one
            // println!("{prv} => {char} <= {nxt}")
        }
        // println!("{above} => {chr} <= Final")
        // }
        // unwrap().chars().nth(idx).unwrap();
    }
    Ok(())
}
